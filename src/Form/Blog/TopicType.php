<?php


namespace App\Form\Blog;

use App\Entity\BlogTopic;
use App\Entity\BlogTopicHashTag;
use App\Utils\HashTagsNormalizer;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\CollectionType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Validator\Constraints\Callback;
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Component\Validator\Constraints\Regex;
use Symfony\Component\Validator\Context\ExecutionContextInterface;

class TopicType extends AbstractType
{
    /**
     * @param FormBuilderInterface $builder
     * @param array $options
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
//        parent::buildForm($builder, $options); // TODO: Change the autogenerated stub
        $builder
            ->add('name', TextType::class, [
                'label'       => 'Topic',
                'constraints' => [
                    new NotBlank(),
                ]
            ])
            ->add('text', TextareaType::class, [
                'label'       => 'Text',
                'constraints' => [
                    new NotBlank(),
                ]
            ])
            ->add('hash', TextType::class, [
                'label'       => 'HashTag',
                'constraints' => [
                    new NotBlank(),
                    new Regex('/^#/'),
                    new Length(['max' => 100]),
                    new Callback([$this, 'validateHashTags'])
                ]
            ]);
    }

    public function validateHashTags($hashTag, ExecutionContextInterface $context)
    {
        $hashes = HashTagsNormalizer::normalize($hashTag);

        if (count($hashes) > BlogTopic::HASH_TAGS_LIMIT) {
            $context
                ->buildViolation("Too many tags.")
                ->atPath('hash')
                ->addViolation();
        }
    }

    public function configureOptions(OptionsResolver $resolver)
    {
//        parent::configureOptions($resolver); // TODO: Change the autogenerated stub
        $resolver -> setDefaults([
            'data_class' => BlogTopic::class,
        ]);
    }
}
