<?php


namespace App\Form\Blog;

use App\Entity\BlogTopic;
use App\Entity\BlogTopicHashTag;
use App\Utils\HashTagsNormalizer;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\CollectionType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Validator\Constraints\Callback;
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Component\Validator\Constraints\Regex;
use Symfony\Component\Validator\Context\ExecutionContextInterface;

class TopicType extends AbstractType
{
    /**
     * @param FormBuilderInterface $builder
     * @param array $options
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
//        parent::buildForm($builder, $options); // TODO: Change the autogenerated stub
        $builder
            ->add('name', TextType::class, [
                'label'       => 'Topic',
                'constraints' => [
                    new NotBlank(),
                ]
            ])
            ->add('text', TextareaType::class, [
                'label'       => 'Text',
                'constraints' => [
                    new NotBlank(),
                ]
            ])
            ->add('hash', TextType::class, [
//            ->add('blogTopicHashTags', TextType::class, [
                'label'       => 'HashTag',
                'constraints' => [
                    new NotBlank(),
                    new Regex('/^#/'),
                    new Length(['max' => 100]),
                    new Callback([$this, 'validateHashTags'])
                ]
            ]);


        $builder->addEventListener(FormEvents::PRE_SET_DATA, function (FormEvent $event) {
            /** @var BlogTopic $data */
            $data = $event->getData();
            $tags = '';

            foreach ($data->getBlogTopicHashTags()->toArray() as $tag) {
                $tags .= "#{$tag->getName()} ";
            }

            $data->setHash($tags);
        });


//        $builder->addEventListener(FormEvents::POST_SUBMIT, function (FormEvent $event) {
//            /** @var BlogTopic $data */
//            $data = $event->getData();
//            $form = $event->getForm();
//
//            $tags = $data->getHash();
//            $tags = HashTagsNormalizer::normalize($tags);
//            dump($tags);
////            dump($data->getBlogTopicHashTags()->toArray());
//            $missing = [];
////            $existedTags = $data->getBlogTopicHashTags()->getValues()->toArray();
////            $existedTags = $data->getBlogTopicHashTags()->getValues();
////            $existedTags = $data->getBlogTopicHashTags()->toArray();
////            dump($existedTags);
////            foreach ($existedTags as $existedTag) {
////                $ab = $existedTags->getName();
////                dump($ab);
////            }
//            $old = [];
//            foreach ($data->getBlogTopicHashTags()->toArray() as $blogTopicTag) {
////            foreach ($tags as $submittedTag) {
////                dump($blogTopicTag->getName());
//                $old[] = $blogTopicTag->getName();
//
//            }
////            dump($missing);
//            dump($old);
//            $existing = [];
//            foreach ($tags as $tag) {
//                if (in_array($tag, $old)) {
////                    $blogTopicTag->getName();
////                    dump($blogTopicTag->getName());
//                    $existing[] = $tag;
//                }
//            }
//            dump($existing);
////            $data->addBlogTopicHashTag();
////            dump($data);
////            die();
//
//            $tags = $data->getBlogTopicHashTags()->filter(function ($hash) use ($tags) {
//
//                dump($hash->getName());
//                dump($tags);
//            });
//
//            dump($tags);
//            dump($data->getBlogTopicHashTags()->toArray());
//            die;
//        });
    }

    public function validateHashTags($hashTag, ExecutionContextInterface $context)
    {
        $hashes = HashTagsNormalizer::normalize($hashTag);

        if (count($hashes) > BlogTopic::HASH_TAGS_LIMIT) {
            $context
                ->buildViolation("Too many tags.")
                ->atPath('hash')
                ->addViolation();
        }
    }

    public function configureOptions(OptionsResolver $resolver)
    {
//        parent::configureOptions($resolver); // TODO: Change the autogenerated stub
        $resolver -> setDefaults([
            'data_class' => BlogTopic::class,
        ]);
    }
}
