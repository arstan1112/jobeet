<?php


namespace App\Form\Blog;

use App\Entity\BlogTopic;
use App\Entity\BlogTopicHashTag;
use App\Utils\HashTagsNormalizer;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\CollectionType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Validator\Constraints\Callback;
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Component\Validator\Constraints\Regex;
use Symfony\Component\Validator\Context\ExecutionContextInterface;

class TopicType extends AbstractType
{

    /**
     * @var
     */
    private $tags;

    /**
     * @param FormBuilderInterface $builder
     * @param array $options
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
//        parent::buildForm($builder, $options); // TODO: Change the autogenerated stub
        $builder
            ->add('name', TextType::class, [
                'label'       => 'Topic',
                'constraints' => [
                    new NotBlank(),
                ]
            ])
            ->add('text', TextareaType::class, [
                'label'       => 'Text',
                'attr' => [
                    'class' => 'tinymce',
                    'data-theme' => 'bbcode'
                ],
                'constraints' => [
                    new NotBlank(),
                ]
            ])

//            ->add('hash', TextType::class, [
//                'label'       => 'HashTag',
//                'constraints' => [
//                    new NotBlank(),
//                    new Regex('/^#/'),
//                    new Length(['max' => 100]),
//                    new Callback([$this, 'validateHashTags'])
//                ]
//            ])

            ->add('hash', ChoiceType::class, [
                'choices'  => [],
                'mapped' => false,
                'multiple' => true,
                'attr' => [
                    'class' => 'select2-example'
                ]
            ]);

        $builder->addEventListener(FormEvents::PRE_SET_DATA, function (FormEvent $event) {
            /** @var BlogTopic $data */
            $data = $event->getData();
            $tags = '';
            foreach ($data->getBlogTopicHashTags()->toArray() as $tag) {
                $tags .= "#{$tag->getName()} ";
            }

            $data->setHash($tags);
        });

        $builder->addEventListener(FormEvents::PRE_SUBMIT, function (FormEvent $event) {
        /** @var BlogTopic $data */
            $data  = $event->getData();
            $topic = $event->getForm()->getData();
            $form  = $event->getForm();

            if (!(isset($data['hash']))) {
                $data['hash'] = "";
            }

            if ($data['hash']) {
                $topic->setHash($data['hash']);
            }

            $form->add('hash', ChoiceType::class, [
                'choices'  => [$data['hash']],
                'mapped' => false,
                'multiple' => true,
                'empty_data' => $data['hash'],
                'attr' => [
                    'class' => 'select2-example'
                ]
            ]);
        });

        $builder->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
        /** @var BlogTopic $data */
            $data  = $event->getData();
            $form  = $event->getForm();

            $tags = [];
            if (is_array($data->getHash())) {
                foreach ($data->getHash() as $tag) {
                    $tags[$tag] = $tag;
                }
            } else {
                $tags[$data->getHash()] = $data->getHash();
            }

            $form->add('hash', ChoiceType::class, [
                'choices'  => $tags,
                'mapped' => false,
                'multiple' => true,
                'empty_data' => 'yes',
                'attr' => [
                    'class' => 'select2-example'
                ]
            ]);
        });
    }

    public function validateHashTags($hashTag, ExecutionContextInterface $context)
    {
        $hashes = HashTagsNormalizer::normalize($hashTag);

        if (count($hashes) > BlogTopic::HASH_TAGS_LIMIT) {
            $context
                ->buildViolation("Too many tags.")
                ->atPath('hash')
                ->addViolation();
        }
    }

    public function configureOptions(OptionsResolver $resolver)
    {
//        parent::configureOptions($resolver); // TODO: Change the autogenerated stub
        $resolver -> setDefaults([
            'data_class' => BlogTopic::class,
        ]);
    }
}
